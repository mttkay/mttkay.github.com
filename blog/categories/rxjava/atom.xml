<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rxjava | mttkay here.]]></title>
  <link href="http://mttkay.github.com/blog/categories/rxjava/atom.xml" rel="self"/>
  <link href="http://mttkay.github.com/"/>
  <updated>2014-01-25T15:39:05+01:00</updated>
  <id>http://mttkay.github.com/</id>
  <author>
    <name><![CDATA[Matthias KÃ¤ppler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monads: Your App As A Function]]></title>
    <link href="http://mttkay.github.com/blog/2014/01/25/your-app-as-a-function/"/>
    <updated>2014-01-25T09:15:00+01:00</updated>
    <id>http://mttkay.github.com/blog/2014/01/25/your-app-as-a-function</id>
    <content type="html"><![CDATA[<p>A paper by Twitter's Marius Eriksen (<a href="http://monkey.org/~marius/funsrv.pdf">"Your server as a function"</a>), which introduces
the key concepts behind Finagle is what made me choose the title for this post.
I believe functional programming (FP) will be just as important to mobile
application development in the future as it is for web development today. The
reason is quite simple: it's easier to write resilient code in functional languages,
and resilience is key. Performance might be a feature, but resilience is a
<em>must</em>. If the critical paths through your business logic are brittle, then your
app can be as fast as light, but your users will still scoff at it and look
elsewhere for value or entertainment.</p>

<p>I write Android applications, and Java is not a functional language. It's not
even an object-oriented language, at least not in a puristic sense. However,
that doesn't stop us from adopting some of the good practices found in FP to
improve on existing Java code. In this post I'll try to explain how adopting
one of the most fundamental type patterns in FP, monadic types, can dramatically
simplify and improve the robustness of your core application logic.</p>

<p>I have already written about <a href="http://mttkay.github.io/blog/2013/08/25/functional-reactive-programming-on-android-with-rxjava/">RxJava and functional reactive programming</a> and how
we make use of it in our mobile applications at SoundCloud.
I hope it served as a good introduction
into using that library specifically, and how expressing expensive operations
through Observables makes your code more resilient to failure and easier to
compose. However, there's a reason why Observables are so
universally useful: they're monads. This post is my own attempt at explaining
monads, why they're so valuable, and why you should consider using them.</p>

<p>Before you keep reading--or, heavens forbid, consider dropping out here!--let me say that none
of the following pragraphs will assume you have experience with FP or any functional
language for that matter. I will use Java for all examples, so that you have
something familiar to work with if you're a Java (or Android) developer already.</p>

<h1>Say Monad one more time...</h1>

<p>It's almost a joke these days. People hate it when FP folks start talking about
monads. People hate it, because they have a vague idea at best of what a monad
is, and it makes you feel like an idiot. No one wants to be an idiot! Let me
tell you: you're not an idiot, and monads are not difficult to understand. It's
just surprisingly difficult to explain them.</p>

<p>I'm not a mathematician. I don't know category theory. But I believe I have
understood monads to a degree that I can make effective use of them in the code
I write day in and day out, and that I can even write my own monadic types.
Here's another piece of good news: if you understand monads, you understand most
of the underpinnings of functional languages. You'll quickly find when jumping
from one FPL to the next, monads will follow you around. It's a bit like
understanding classes in object-oriented languages. If all you've ever known is
procedures and value types, then classes may seem odd at first. But once you
understand classes, it doesn't matter which OOPL you use, the concepts remain
the same.</p>

<p>So what's a monad? I think monads are best explained (and appreciated!) by
realizing in what poor situation you as an imperative programmer actually are.
So I'll start by showing you a piece of code that I bet you've written
yourself in some way shape or form at some point in time,
and then making you reflect on why your code sucks. No offense by the way, my code sucks too.
But that's the great thing about being a developer,
right? We strive to make code suck a little less every single day.</p>

<p>Let's look at the example.</p>

<h1>A piece of code you've written before</h1>

<p>If you're an app developer, chances are you connect to some service API to
download JSON or XML that describes your business objects. At SoundCloud,
everything evolves around tracks, so we download track metadata a lot. If
you're doing it right, then you're also caching this data somewhere. It doesn't
really matter where or how, it could be in a database or just using flat files.
Here's a very typical of way of doing this in Android using the AsyncTask class:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">FetchJsonObject</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">JsonObject</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">protected</span> <span class="n">JsonObject</span> <span class="n">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">final</span> <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">serviceApi</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">readString</span><span class="o">();</span>
</span><span class='line'><span class="n">cache</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">json</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">JsonObject</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Don't worry too much about what types JsonObject or serviceApi are here. This is just pseudo
code serving to get my point across. It should still be easy to see that we're trying
to achieve the following:</p>

<ol>
<li>Download a JSON document from a given URL</li>
<li>Cache it to disk using the URL as the cache key</li>
<li>Parse it into an in-memory representation</li>
</ol>


<p>Instead of actually pointing out what the problem with all this is, let's turn
this into a short Q&amp;A. Have a look at the following questions. What are <em>your</em> answers
to each of them?</p>

<h4>Q: Every single line here can throw an exception. Where is it handled?</h4>

<p>A: Simple, you wrap everything in a try/catch block. Fair enough. Then what?
How do you propagate the exception to the caller? Recall that this job is running
on a background thread, so there might be visibility issues. Moreover, how do
you signal the error? You have to return something from <code>doInBackground</code>. Thinking
about returning null? You might want to listen to what <a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">Tony Hoare has to say about
null references</a> (he invented them by the way.)</p>

<h4>Q: If the API request fails, what do we return?</h4>

<p>A: Easy, we return null! Sorry, but <a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">Tony Hoare says NO</a>, so let's put our
foot down on that one okay?</p>

<h4>Q: If the API request succeeds but caching fails, do we throw out the result?</h4>

<p>A: Uhm, maybe? We haven't really thought about how to propagate the data in this
series of steps. Aha! There's our first clue about what a monad is: transporting
data as a series of steps. I'll pick this up again later.</p>

<h4>Q: Should caching to local storage happen on the same thread as sending API requests?</h4>

<p>A: Probably not. Because this could mean that API requests block local storage
I/O from happening in case they take longer than expected, right? It almost looks
as if caching to local storage should happen in its own task. Or maybe it
has something to do with propagating data as a series of steps... (This is where
you should picture me waving a flag in your face that says monad on it.)</p>

<h4>Q: If I want to just make an API request/just cache to local storage, do I write a new AsyncTask for each?</h4>

<p>A: I suppose so. If we did that, however, how would be combine them to arrive
at the definition above, which performs both steps in succession and pipes data
from one task to the next? I smell sulfur, we might be well on our way to <a href="http://ianbishop.github.io/blog/2013/01/13/escape-from-callback-hell/">callback hell</a>.</p>

<p>I hope the picture begins taking shape. It appears there are a number of related
problems here, most of them having to do with <em>processing data as a series of
potentially asynchronous steps where failure in each step is anticipated.</em></p>

<p>Let's finally look at what monads are and how they solve this for us.</p>

<h1>Monads explained</h1>

<p>We'll get a little more concrete now and jump straight into the definition of
what monads are and what has to hold true for a monad to actually be a monad.
I then show how a simple monadic type could look like in Java.</p>

<p>Let's first look at some of the existing definitions that attempt to put
monads in a single sentence. Erik Meijer, the man behind the <a href="https://rx.codeplex.com/">Reactive Extensions</a>
and my personal hero for wearing a SoundCloud t-shirt on stage at GOTO Berlin,
has this to say about monads:</p>

<blockquote><p>Monads are return types that guide you through the happy path.</p></blockquote>

<p>This might be my favorite definition, because it catches the gist of what monads are
all about. However, it's still a bit vague and doesn't really help in understanding
what the structure of a monad is. Martin Odersky, EPFL fame and inventor of the
Scala programming language looks at it this way:</p>

<blockquote><p>Monads are parametric types with two operations flatMap and unit that obey some algebraic laws.</p></blockquote>

<p>So this is rather the opposite: this definition doesn't really tell us what monads
are good for, but it contains some important clues about their structure, i.e. they
are types, parameterized over another type, and they consist of just two operations.
I told you monads were simple!</p>

<p>Both these definitions I took almost verbatim from the reactive programming course
on Coursera, which I highly recommend. Let's have a look at what Wikipedia has to say:</p>

<blockquote><p>Monads are structures that represent computations defined as sequences of steps.</p></blockquote>

<p>Sounds familiar? I told you I'd come back to the whole sequence of steps thing.
Finally, here's my own attempt at putting monads in a sentence, and it's the definition
I will use throughout the rest of this article:</p>

<blockquote><p>Monads are chainable container types that trap values or computations and allow them to be transformed in confinement.</p></blockquote>

<p>The key take away from this definition are the "three Cs":
<strong>containment, chainability, and confinement.</strong></p>

<p>I will now explain how monads enable these properties for arbitrary data or
computations and why that's super awesome.</p>

<h2>Monads are types</h2>

<p>We just learned that monads are parametric types that define just two operations, <code>unit</code>
(also called return) and <code>flatMap</code> (also called bind or mapMany). I will
show you shortly what these methods do and what a full definition of a monad
looks like in Java, but just to put your worries to rest a little: if you've used
Scala or RxJava before, then you've already seen and used
monads. All lists in Scala are monads with the <code>List</code> constructor method as
unit and a flatMap method to transform them. Observables in RxJava are monads
with <code>Observable.from</code> as unit and mapMany to transform them
(mapMany in RxJava is actually aliased to flatMap, so you can use either one.)</p>

<p>That said, let's have a look at the structure of a monadic type in Java:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Monad</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">T</span> <span class="n">value</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">private</span> <span class="n">Monad</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Monad</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">unit</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">new</span> <span class="n">Monad</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">Monad</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">flatMap</span><span class="o">(</span><span class="n">Func1</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">,</span> <span class="n">Monad</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;&gt;</span> <span class="n">func</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">func</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">public</span> <span class="n">T</span> <span class="n">get</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I've added a third method here, <code>get</code>, but it's hardly worth talking about a
getter function, so let's skip it as part of the discussion and turn straight
to <code>unit</code> and <code>flatMap</code>.</p>

<h2>The 1st C: unit enables containment</h2>

<p>There's an obvious take away from the snippet above: a monad is defined over a type <code>T</code> which
it contains values of. Containment here is enabled by the <code>unit</code> function: it takes a <code>T</code>
and traps it in the monad by creating a new instance of the monad with that value
passed into it. At this point I should mention that <code>T</code> can be anything, including
collection types like lists. Remember RxJava and observables? An Observable is
a monad defined over collections of values. Let's keep things simple though
and let's create a monad of integers:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Monad</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intMonad</span> <span class="o">=</span> <span class="n">Monad</span><span class="o">.</span><span class="na">unit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So we stuff the number 2 in our monad. Cool, but not so useful thus far.
What makes it useful is the flatMap method, so let's turn to flatMap.</p>

<h2>The 2nd C: flatMap enables chainability</h2>

<p>I admit this one might look a bit more puzzling, but it's
actually pretty straight forward once you look past the awkward syntax. The <code>flatMap</code>
function itself is defined over a new type variable, <code>R</code>, and it returns a new monad
of that type <code>Monad&lt;R&gt;</code>. It does so, however, not just by trapping the value in it like
unit does, but by applying a function to the current value, a function which
knows how to turn <code>T</code>s into monads of <code>R</code>. (I borrowed the <code>Func1</code> type from
RxJava here: it means it's a function object that takes 1 argument of type <code>T</code>
and returns something of type <code>Monad&lt;R&gt;</code>.)</p>

<p>Let this sink in for a second, since this is perhaps the most important aspect
of monads. It's important because it allows us to chain monads together using
transformations of the values they contain. I can take a monad containing, say,
an integer, and flatMap it using a function which takes this integer, transforms
it (say, by taking the square root of that number) and sticking it in a new monad. The last part
is critical, since it means we can do this forever and ever, because the return
value will be a monad again with a flatMap function which can again take a
function which returns another monad which has... you get the idea.</p>

<p>Let's take the square root example using the monad we just created:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">intMonad</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="k">new</span> <span class="n">Func1</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Monad</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;&gt;()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">Monad</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Double</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">call</span><span class="o">(</span><span class="n">Integer</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Monad</span><span class="o">.</span><span class="na">unit</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">input</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}).</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that looks more useful! What we've done here is take our initial integer
monad and transformed it using flatMap to obtain a new monad of type <code>Monad&lt;Double&gt;</code>
that contains the square root of the initial value. This is fundamentally
different from applying the <code>sqrt</code> function directly to some input, since
there's no flatMap method defined on <code>double</code> that you could use to apply
further transformations, so you'd effectivly lose the property of chainability.</p>

<p>This also enables entirely new perspectives in terms of code structure and reuse:
since the monad structure never changes, your business logic is
entirely expressed in terms of functions, which transform values step wise,
are defined and tested in isolation, and composed together to form new
pieces of functionality. It's like Legos, but using functions.</p>

<h2>The 3rd C: To be continued...</h2>

<p>If you paid attention at the beginning, you might have noticed that the "3rd C", namely
confinement is still missing. This is because is has to do
with the algebraic laws a monad has to obey. Frankly, I haven't been completely honest with you.
Our sample type follows a monadic structure, but purists will say it's not
actually a monad. There's a more subtle aspect of flatMap than just being able
to chain things together, and it has all to do with making monads resilient
and not allowing things to leak out of the monad.</p>

<p>Why that is the case, how it has to do with the three monad laws, and how we
can piece everything together to turn our initial AsyncTask example into
something fundamentally better using monads is what I will cover in part 2 of this article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Reactive Programming on Android with RxJava]]></title>
    <link href="http://mttkay.github.com/blog/2013/08/25/functional-reactive-programming-on-android-with-rxjava/"/>
    <updated>2013-08-25T09:05:00+02:00</updated>
    <id>http://mttkay.github.com/blog/2013/08/25/functional-reactive-programming-on-android-with-rxjava</id>
    <content type="html"><![CDATA[<p>Shameless plug: if after reading this article, you want to know more, come hear me talk at <a href="http://uk.droidcon.com/2013/lineup/">DroidCon UK 2013</a>!</p>

<p>If you are an application developer, there are two inconvenient truths:</p>

<ol>
<li>Modern applications are inherently concurrent.</li>
<li>Writing concurrent programs that are correct is difficult.</li>
</ol>


<p>In the domain of mobile or desktop applications,
parallel execution allows for responsive user interfaces because we can move
computations into the background while the UI responds to ongoing
user interactions. Code must execute concurrently
to not stray from this fundamental requirement.
Writing such programs
is diffcult because on mobile they are typically written in imperative
languages like C or Java. Writing concurrent code in imperative
languages is difficult because code is written in terms of interweaved,
temporal instructions that move objects
or data structures from one state to another. This imperative style of programming
inherently produces side effects. It presents several problems when running
instructions in parallel, such as race conditions when writing to a shared resource.</p>

<h1>Resistance is futile--or is it?</h1>

<p>Developers have grown accustomed to the drawbacks of
expressing concurrency in imperative languages.
On platforms like Android where Java is (still) the
dominant language, concurrency simply sucks, and we should just give in and deal with it.
I personally keep a close eye on the server side end of the spectrum.
Over the past few years,
functional programming has made an astounding comeback
in terms of rate of adoption and innovation, the details of which
I will not get into here. In the case of concurrency, functional programming has
a very simple answer to dealing with shared state: don't have it.</p>

<h2>Problems of concurrent programming with AsyncTask</h2>

<p>Being based on Java, Android comes with a standard number of Java concurrency
primitives such as <code>Thread</code>s and <code>Future</code>s. While these tools make
it easy to perform simple asynchronous tasks, they are fairly low level and require
a substantial amount of diligence when you use them to model complex
interactions between concurrent objects. A frequent use case on Android
or any UI-driven application is to perform a background job
and then update the UI with the result of the operation. Android provides <code>AsyncTask</code>
for exactly that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">DownloadTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">File</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">protected</span> <span class="n">File</span> <span class="n">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">final</span> <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">fileContent</span> <span class="o">=</span> <span class="n">downloadFile</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>  <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">writeToFile</span><span class="o">(</span><span class="n">fileContent</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">file</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// ???</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">protected</span> <span class="kt">void</span> <span class="n">onPostExecute</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="n">getContext</span><span class="o">();</span> <span class="c1">// ???</span>
</span><span class='line'><span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">context</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;Downloaded: &quot;</span> <span class="o">+</span> <span class="n">file</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This looks straightforward. Define a method <code>doInBackground</code> that accepts
something through its formal parameters, and returns something as the result
of the operation. Android guarantees that this code will execute in a thread
that is not the main user-interface thread. We also define a UI callback function
<code>onPostExecute</code> that receives the result of the computation and can consume
it on the main UI thread, since Android guarantees that this method will always
be invoked on the main thread.</p>

<h3>In search for the jigsaw-puzzle pieces</h3>

<p>So far so good. What's wrong with this picture?
Let's start with <code>doInBackground</code>, which
downloads a file--a costly operation because it involves network and disk I/O.
There are many things that can go wrong, so we want to
recover from errors, and add a try-catch block. What do we do in the catch
block? Log the error? Perhaps we want to inform
the user about this error too, which likely involves interacting with the UI.
Wait, we cannot do that because we are not allowed to update any user-interface elements
from a background thread. Bummer.</p>

<p>It should be easy to handle that error in <code>onPostExecute</code>.
We might reason that it is as simple as holding on to the exception in a private
field (i.e. we write it on the background thread), and check in <code>onPostExecute</code>
(i.e. read it on the UI thread) if that field is set to something other than
null (did I mention we love null checks) and display it to the user in some way
shape or form. But wait, how do we obtain a reference to a
<code>Context</code>, without which we cannot do anything meaningful with the UI? Apparently,
we have to bind it to the task instance up front, at the point of instantiation,
and keep a reference to it throughout a task's execution. But what if the download
takes a minute to run? Do we want to hold on to an <code>Activity</code> instance
for an entire minute? What if the user decides to back out of the Activity that
triggered the task, and we are holding on to a stale reference. This not only
creates a substantial memory leak, but is also worthless because meanwhile it
has been detached from the application window. A problem that
<a href="https://www.google.de/search?q=asynctask+configuration+change">everyone is well aware of</a>.</p>

<h3>Beyond the basics</h3>

<p>There are other problems
with all this. The preceding task is incredibly simple. Picture a more complicated
scenario where we need to orchestrate a number of such operations. For example, we might
want to fetch some JSON from a service API, parse it, map it,
filter it, cache it to disk, and only then feed the result to the UI. All
the aforementioned operations should--as per the single responsibility principle--exist
as separate objects, perhaps exposed through different services. It is difficult and
non-intuitive to use <code>AsyncTask</code> because it requires
grouping any number of combinations of service interactions into separate task
classes. This results in a proliferation of meaningless task classes,
from the perspective of your business logic.</p>

<p>Another option is to have one task class per service-object invocation, or
wrap the service objects themselves in <code>AsyncTasks</code>.
Composing service objects means nesting <code>AsyncTask</code>, which leads to what is
commonly referred to as "callback hell" because you start tasks from a task callback
from a task callback from a ... you get the idea.</p>

<p>Last but not least, <code>AsyncTask</code>s scheduling behavior varies significantly across
different versions of Android. It's changed from a capped thread pool
in the 1.x days (with varying bounds depending on the API level)
to a <em>single thread executor</em> model in 4.x. Read that again. Your tasks (plural)
do <em>not</em> run concurrently to each other on ICS devices and beyond (although they do run
concurrently to the main UI thread). Why did Google decide to serialize task execution?
Developers could not get it right,
applications suffered from nasty problems due to race conditions and incorrectly
synchronized code.</p>

<h3>The inconvenient truth</h3>

<p>Should we still use <code>Thread</code> and <code>AsyncTask</code>?</p>

<p>The answer is "probably". For simple, one-shot jobs that do not require
much orchestration, <code>AsyncTask</code> is fine. For anything more complex
it is doable, but requires juggling with <code>volatile</code>s, <code>WeakReference</code>s,
<code>null</code> checks, and other <a href="http://devblog.avdi.org/2012/06/05/confident-ruby-beta/">defensive, unconfident mechanisms</a>.
Perhaps worst of all, it requires you to
think about things that have nothing to do with the problem that you set out to solve, which is<br/>
to download a file.</p>

<h1>Enter RxJava--now with more Android</h1>

<p>To come back to the initial problem statement, do we have to give in to the lack
of high-level abstractions and deal with it, or do better solutions exist? Turns
out that functional programming might have an answer to
this. "But wait" you might say, "I still wanna use Java?". Turns out, yes, you can.
It is not super pretty (at least not unless Google whips out its magic wand and
gives us Java 8 and closures on Dalvik, or unless you feel attracted to anonymous classes and
six levels of identation). However, it solves all of the problems in
one fell swoop:</p>

<ul>
<li>No standard mechanism to recover from errors</li>
<li>Lack of control over thread scheduling (unless you like to dig deep)</li>
<li>No obvious way to compose asynchronous operations</li>
<li>No obvious and hassle-free way of attaching to <code>Context</code></li>
</ul>


<p><a href="https://github.com/Netflix/RxJava">RxJava</a> is an implementation of the Reactive Extensions (Rx)
on the JVM, courtesy of Netflix. Rx was first conceived by Erik Meijer
on the Microsoft .NET platform, as a way of combining data or event streams with
reactive objects and functional composition. In Rx, events are modeled
as observable streams to which observers are subscribed. These streams, or observables
for short, can be filtered, transformed, and composed in various ways before their
results are emitted to an observer. Every observer is defined within three messages:
<code>onNext</code>, <code>onCompleted</code>, and <code>onError</code>. Concurrency is a variable in this equation,
and abstracted away in the form of schedulers. Generally, every observable stream
exposes an interface that is modeled after concurrent execution flows (i.e. you don't
call it, you subscribe to it), but by default is executed synchronously. Introducing
schedulers can make an observable execute using various concurrency primitives
such as threads, thread pools, or even Scala actors. Here is an example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Subscription</span> <span class="n">sub</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">newThread</span><span class="o">())</span>
</span><span class='line'><span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// ...&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sub</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This creates a new, observable stream from the given list of integers, and emits
them one after another on the given observer. The use of <code>subscribeOn</code> and <code>observeOn</code>
configures the stream to emit the numbers on a new <code>Thread</code>, and to receive them on
the Android main UI thread. For example, the observer's <code>onNext</code> method is called on the main thread.
Eventually, you unsubscribe from the observable. Here is an example <code>Observer</code> implementation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IntObserver</span> <span class="kd">implements</span> <span class="n">Observer</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="o">(</span><span class="n">Integer</span> <span class="n">value</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;received: &quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// onCompleted and onError omitted</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For something more interesting, you can implement the download task as an Rx <code>Observable</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="nf">downloadFileObservable</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="k">new</span> <span class="n">OnSubscribeFunc</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">File</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Subscription</span> <span class="nf">onSubscribe</span><span class="o">(</span><span class="n">Observer</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?</span> <span class="kd">super</span> <span class="n">File</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">fileObserver</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">byte</span><span class="o">[]</span> <span class="n">fileContent</span> <span class="o">=</span> <span class="n">downloadFile</span><span class="o">();</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">writeToFile</span><span class="o">(</span><span class="n">fileContent</span><span class="o">);</span>
</span><span class='line'>            <span class="n">fileObserver</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>            <span class="n">fileObserver</span><span class="o">.</span><span class="na">onCompleted</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fileObserver</span><span class="o">.</span><span class="na">onError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Subscriptions</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The preceding example creates a method that builds an <code>Observable</code> <em>stream</em>, which in this case
only ever emits a single item (the file) to which a <code>File</code> observer can connect. Whenever
this observable is subscribed to, its <code>onSubscribe</code> function triggers and executes the task at hand.
If the task can be carried out successfully, deliver the result to the observer through <code>onNext</code>
so <code>onNext</code> can properly react to it. Then signal completion by using <code>onCompleted</code>. If an exception
is raised, deliver it to the observer through <code>onError</code>. As an example, you can use this from a <code>Fragment</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">MyFragment</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="kd">implements</span> <span class="n">Observer</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Subscription</span> <span class="n">subscription</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">subscription</span> <span class="o">=</span> <span class="n">AndroidObservables</span><span class="o">.</span><span class="na">fromFragment</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">downloadFileObservable</span><span class="o">())</span>
</span><span class='line'>                      <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">newThread</span><span class="o">())</span>
</span><span class='line'>                      <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">private</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">File</span><span class="o">&gt;</span> <span class="n">downloadFileObservable</span><span class="o">()</span> <span class="o">{</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">as</span> <span class="n">above</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">subscription</span><span class="o">.</span><span class="na">unsubscribe</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">public</span> <span class="kt">void</span> <span class="n">onNext</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getActivity</span><span class="o">(),</span>
</span><span class='line'>    <span class="s">&quot;Downloaded: &quot;</span> <span class="o">+</span> <span class="n">file</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">public</span> <span class="kt">void</span> <span class="n">onCompleted</span><span class="o">()</span> <span class="o">{}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">public</span> <span class="kt">void</span> <span class="n">onError</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">error</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getActivity</span><span class="o">(),</span>
</span><span class='line'>    <span class="s">&quot;Download failed: &quot;</span> <span class="o">+</span> <span class="n">error</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By using RxJava, the aforementioned issues are solved all at the same time. The <code>fromFragment</code>
call transforms the given source observable in such a way that events will only be emitted to the
fragment if it's still alive and attached to its host activity. Call <code>unsubscribe</code> in <code>onDestroy</code> to ensure
that all references to the fragment, which is also the observer, are released.</p>

<p>You can have proper error handling through an observer's <code>onError</code> callback. Also, you can
execute the task on any given scheduler with a simple method call. Doing so gives you fine-grained
control over where the expensive code is run and where the callbacks will run, all without
you having to write a single line of synchronization logic. Futhermore, RxJava allows you to
compose and transform observables to obtain new ones, which enables you to reuse code easily.
For example, to not emit the <code>File</code> itself, but merely its path, transform the <em>existing</em> observable:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">filePathObservable</span> <span class="o">=</span> <span class="n">downloadFileObservable</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="k">new</span> <span class="n">Func1</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">File</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">file</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;});&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// now emits file paths, not &lt;code&gt;File&lt;/code&gt;s</span>
</span><span class='line'><span class="n">subscription</span> <span class="o">=</span> <span class="n">filePathObservable</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Observer</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can see how powerful this way of expressing asynchronous computations is.
At <a href="https://soundcloud.com">SoundCloud</a>, we are moving most of our code that relies
heavily on event-based and asynchronous operations to Rx observables. For
convenience, we contributed <code>AndroidSchedulers</code> that schedule an observer to receive callbacks
on a <code>Handler</code> thread. See <a href="https://github.com/Netflix/RxJava/tree/master/rxjava-contrib/rxjava-android">rxjava-android</a>.
We are also in the process of contributing those operators back that allow observing
observables from Fragments and Activities in an easy and safe way, as seen in the previous example.</p>

<p>In a nutshell, RxJava finally makes concurrency and event-based programming on Android hassle free.
Note that we follow the same strategy on iOS using GitHub's <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">Reactive Cocoa</a>
library because we have committed ourselves to the functional-reactive paradigm.
We think that it is an exciting development that leads to code that is more stable, easier to unit test,
and free of low-level state or concurrency concerns that would otherwise take over your
service objects.</p>

<p>To hear more about this topic, watch this <a href="http://backstage.soundcloud.com/2013/08/responsive-android-applications-with-sane-code/">interview with our Director of Mobile Engineering on Root Access Berlin</a>
and come see me at <a href="http://uk.droidcon.com/2013/lineup/">DroidCon UK 2013</a> where I will be speaking about RxJava and its use in the SoundCloud application on the developer track.</p>
]]></content>
  </entry>
  
</feed>
